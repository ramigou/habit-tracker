{"version":3,"sources":["components/habit.jsx","components/habitAddForm.jsx","components/habits.jsx","components/navbar.jsx","app.jsx","index.js"],"names":["Habit","handleIncrement","props","onIncrement","habit","handleDecrement","onDecrement","handleDelete","onDelete","console","log","this","name","count","className","onClick","PureComponent","HabitAddForm","memo","inputRef","React","createRef","formRef","ref","onSubmit","event","preventDefault","current","value","onAdd","reset","type","placeholder","Habits","handleAdd","habits","map","id","onReset","Component","Navbar","totalCount","App","state","item","setState","filter","Date","now","handleReset","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07b94a23.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\n\nclass Habit extends PureComponent {\n  componentDidMount() {\n    console.log(`habit: ${this.props.habit.name} mounted`);\n  }\n\n  // UI에서 해당 컴포넌트가 사라질 때 호출되는 함수\n  componentWillUnmount() {\n    console.log(`habit: ${this.props.habit.name} unmounted`);\n  }\n\n  handleIncrement = () => {\n    this.props.onIncrement(this.props.habit);\n  };\n\n  handleDecrement = () => {\n    this.props.onDecrement(this.props.habit);\n  };\n\n  handleDelete = () => {\n    this.props.onDelete(this.props.habit);\n  };\n\n  render() {\n    const { name, count } = this.props.habit;\n    // const { count } = this.props;\n\n    return (\n      <li className=\"habit\">\n        <span className=\"habit-name\">{name}</span>\n        <span className=\"habit-count\">{count}</span>\n        <button\n          className=\"habit-button habit-increase\"\n          onClick={this.handleIncrement}\n        >\n          <i className=\"fas fa-plus-circle\"></i>\n        </button>\n        <button\n          className=\"habit-button habit-decrease\"\n          onClick={this.handleDecrement}\n        >\n          <i className=\"fas fa-minus-circle\"></i>\n        </button>\n        <button\n          className=\"habit-button habit-delete\"\n          onClick={this.handleDelete}\n        >\n          <i className=\"fas fa-trash-alt\"></i>\n        </button>\n      </li>\n    );\n  }\n}\n\nexport default Habit;\n","// function component 자동 만들기 rsi\nimport React, { memo } from \"react\";\n\n// memo를 사용하면 해당 component에 props가 사용되지 않는다면 render 되지 않음\nconst HabitAddForm = memo((props) => {\n  const inputRef = React.createRef();\n  const formRef = React.createRef();\n\n  const onSubmit = (event) => {\n    // refresh 방지\n    event.preventDefault();\n    const name = inputRef.current.value;\n    // input에 무언가가 적혀있다면 onAdd함수에 전달해줌\n    name && props.onAdd(name);\n\n    // add 한 후 입력 칸 초기화 하는 방법\n    // inputRef.current.value = \"\";\n    // 정석으로 초기화하는 방법\n    formRef.current.reset();\n  };\n  return (\n    <form ref={formRef} className=\"add-form\" onSubmit={onSubmit}>\n      <input\n        ref={inputRef}\n        type=\"text\"\n        className=\"add-input\"\n        placeholder=\"Type your habits\"\n      ></input>\n      <button className=\"add-button\">Add</button>\n    </form>\n  );\n});\n\nexport default HabitAddForm;\n","import React, { Component } from \"react\";\nimport Habit from \"./habit\";\nimport HabitAddForm from \"./habitAddForm\";\n\nclass Habits extends Component {\n  handleIncrement = (habit) => {\n    this.props.onIncrement(habit);\n  };\n\n  handleDecrement = (habit) => {\n    this.props.onDecrement(habit);\n  };\n\n  handleDelete = (habit) => {\n    this.props.onDelete(habit);\n  };\n\n  handleAdd = (name) => {\n    this.props.onAdd(name);\n  };\n\n  // 변화되는 부분을 habit.count처럼 별도로 전달해줘야 count를 변화시킬 수 있음\n  // PureComponent에서 habit 객체 안의 count만 변경하면 레퍼런스를 참조해서 동일하다고 판단하여\n  // render 함수를 호출하지 않음 그래서 따로 props를 전달해야 함\n  render() {\n    return (\n      <>\n        <HabitAddForm onAdd={this.handleAdd} />\n        <ul>\n          {this.props.habits.map((habit) => (\n            <Habit\n              key={habit.id}\n              habit={habit}\n              // name={habit.name}\n              // count={habit.count}\n              onIncrement={this.handleIncrement}\n              onDecrement={this.handleDecrement}\n              onDelete={this.handleDelete}\n            />\n          ))}\n        </ul>\n        {/* reset 버튼이 재사용이 많이 된다면 컴포넌트로 따로 빼서 만들면 됨 */}\n        <button className=\"habits-reset\" onClick={this.props.onReset}>\n          Reset All\n        </button>\n      </>\n    );\n  }\n}\n\nexport default Habits;\n","import React, { PureComponent } from \"react\";\n\nclass Navbar extends PureComponent {\n  render() {\n    return (\n      <nav className=\"navbar\">\n        <i className=\"navbar-logo fas fa-heart\"></i>\n        <span>Habit Tracker</span>\n        <span className=\"navbar-count\">{this.props.totalCount}</span>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport Habits from \"./components/habits\";\nimport \"./app.css\";\nimport Navbar from \"./components/navbar\";\n\nclass App extends Component {\n  state = {\n    habits: [\n      { id: 1, name: \"reading\", count: 0 },\n      { id: 2, name: \"eating\", count: 0 },\n      { id: 3, name: \"coding\", count: 0 },\n      { id: 4, name: \"sleeping\", count: 0 }\n    ]\n  };\n\n  handleIncrement = (habit) => {\n    // habits 배열을 돌면서 인자로 들어온 habit 객체의 id가 같다면\n    // 해당 habit 객체의 count만 변경해줌\n    const habits = this.state.habits.map((item) => {\n      if (item.id === habit.id) {\n        return { ...habit, count: habit.count + 1 };\n      }\n      return item;\n    });\n    this.setState({ habits });\n  };\n\n  handleDecrement = (habit) => {\n    const habits = this.state.habits.map((item) => {\n      if (item.id === habit.id) {\n        const count = habit.count - 1;\n        return { ...habit, count: count < 0 ? 0 : count };\n      }\n      return item;\n    });\n    this.setState({ habits });\n  };\n\n  handleDelete = (habit) => {\n    // const habits = [...this.state.habits];\n    // const index = habits.indexOf(habit);\n    // habits.splice(index, 1);\n\n    // filter 함수!!\n    const habits = this.state.habits.filter((item) => item.id !== habit.id);\n\n    this.setState({ habits });\n  };\n\n  handleAdd = (name) => {\n    const habits = [...this.state.habits, { id: Date.now(), name, count: 0 }];\n    // habits.push({ id: habits.length + 1, name, count: 0 });\n\n    this.setState({ habits });\n  };\n\n  handleReset = () => {\n    const habits = this.state.habits.map((item) => {\n      if (item.count !== 0) {\n        return { ...item, count: 0 };\n      }\n      return item;\n    });\n\n    this.setState({ habits });\n  };\n\n  render() {\n    return (\n      <>\n        {/* count가 0 이상인 습관 요소를 배열로 만든 후 이 배열의 길이를 반환 */}\n        <Navbar\n          totalCount={this.state.habits.filter((item) => item.count > 0).length}\n        />\n        <Habits\n          habits={this.state.habits}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onDelete={this.handleDelete}\n          onAdd={this.handleAdd}\n          onReset={this.handleReset}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app\";\n// React hook 사용하기 연습용 컴포넌트\n// import SimpleHabit from \"./components/simpleHabit\";\nimport \"@fortawesome/fontawesome-free/js/all.js\";\n\nReactDOM.render(\n  // 실제 배포할 때는 로그가 두번씩 나오지 않음\n  <React.StrictMode>\n    <App />\n    {/* <SimpleHabit /> */}\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}